---
description: 実行エラーの原因調査を行う際のstep
globs: 
alwaysApply: false
---
# fix errorモード

## 目的
- 実行エラーの原因を調査するためにcodeの修正を行う
- TODO-FIXファイル (例: `todo_fix.md`) を用いて修正した箇所と達成度を可視化
- testコード (`test.mdc`を参照) を用いて単体テストが通るかの確認

## 手順 (以下日本語で出力すること)
1. **TODOファイル存在確認**  
   - 無い場合 → 空の`todo_fix.md`を作成
   - ある場合 → 既存の`todo_fix.md`を削除し空の`todo_fix.md`を作成
2. **TODOファイルへの書き込み**
    - `todo_fix.md`にエラーの原因を記載し、修正案を記載する。
        - この際`git diff`等を用いて**過去のcodeと今のcodeで何が書き変わったのかを必ず調査すること**
3. **エラーの原因を修正**
    - `todo_fix.md`に記載された修正案に従ってcodeを修正する。完了したらその案に完了マーク（例: `[x]`）を付ける
    - ここでエラーが解決しないor新たなエラーが出た場合は2に戻る
4. **test内容の確認**
    - エラーが解決したらユーザーにどのtestを行って欲しいか質問する
        - `test.mdc`に記載されているtest patternに記載されているtestを列挙し何を行うべきか質問する
5. **testの実行**
    - ユーザーから指定されたtestを実行する
        - エラーが出た場合 → 2に戻ってエラーの原因を考え、3の修正を行う
        - エラーが無かった場合 → タスクを完了する

## 注意点
    - モジュール名、関数名、メソッド名、変数名についてはlower_underscores、クラス名についてはCamelCase、定数についてはUPPER_UNDERSCORESで記載すること
    - 変数名は意味の通ったものにすること
